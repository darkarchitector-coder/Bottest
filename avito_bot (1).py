import logging
import sqlite3
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.callback_data import CallbackData
import asyncio
from datetime import datetime
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à)
API_TOKEN = 'YOUR_BOT_TOKEN_HERE'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# Callback data –¥–ª—è –∫–Ω–æ–ø–æ–∫
admin_cb = CallbackData('admin', 'action', 'listing_id')
listing_cb = CallbackData('listing', 'action', 'listing_id')

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
CATEGORIES = {
    'electronics': 'üì± –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
    'food': 'üçï –ü–∏—Ç–∞–Ω–∏–µ', 
    'clothing': 'üëï –û–¥–µ–∂–¥–∞',
    'other': 'üîß –†–∞–∑–Ω–æ–µ'
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ListingStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_photo = State()
    waiting_for_category = State()
    waiting_for_shop_price = State()
    waiting_for_my_price = State()
    waiting_for_quantity = State()

class AdminStates(StatesGroup):
    waiting_for_admin_id = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('marketplace_bot.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            role TEXT DEFAULT 'user',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS listings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            title TEXT NOT NULL,
            description TEXT,
            photo_id TEXT,
            category TEXT NOT NULL,
            shop_price REAL NOT NULL,
            my_price REAL NOT NULL,
            quantity INTEGER NOT NULL,
            status TEXT DEFAULT 'pending',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            approved_at TIMESTAMP,
            approved_by INTEGER,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_user_role(user_id):
    conn = sqlite3.connect('marketplace_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT role FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None

def add_user(user_id, username, first_name):
    conn = sqlite3.connect('marketplace_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR IGNORE INTO users (user_id, username, first_name)
        VALUES (?, ?, ?)
    ''', (user_id, username, first_name))
    conn.commit()
    conn.close()

def make_admin(user_id):
    conn = sqlite3.connect('marketplace_bot.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET role = ? WHERE user_id = ?', ('admin', user_id))
    conn.commit()
    conn.close()

def add_listing(user_id, title, description, photo_id, category, shop_price, my_price, quantity):
    conn = sqlite3.connect('marketplace_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO listings (user_id, title, description, photo_id, category, shop_price, my_price, quantity)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    ''', (user_id, title, description, photo_id, category, shop_price, my_price, quantity))
    listing_id = cursor.lastrowid
    conn.commit()
    conn.close()
    return listing_id

def get_pending_listings():
    conn = sqlite3.connect('marketplace_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT l.id, l.title, l.description, l.category, l.shop_price, l.my_price, l.quantity, u.username
        FROM listings l
        JOIN users u ON l.user_id = u.user_id
        WHERE l.status = 'pending'
        ORDER BY l.created_at
    ''')
    results = cursor.fetchall()
    conn.close()
    return results

def get_approved_listings(category=None):
    conn = sqlite3.connect('marketplace_bot.db')
    cursor = conn.cursor()
    
    if category:
        cursor.execute('''
            SELECT l.id, l.title, l.description, l.photo_id, l.category, l.shop_price, l.my_price, l.quantity, u.username
            FROM listings l
            JOIN users u ON l.user_id = u.user_id
            WHERE l.status = 'approved' AND l.category = ?
            ORDER BY l.created_at DESC
        ''', (category,))
    else:
        cursor.execute('''
            SELECT l.id, l.title, l.description, l.photo_id, l.category, l.shop_price, l.my_price, l.quantity, u.username
            FROM listings l
            JOIN users u ON l.user_id = u.user_id
            WHERE l.status = 'approved'
            ORDER BY l.created_at DESC
        ''')
    
    results = cursor.fetchall()
    conn.close()
    return results

def approve_listing(listing_id, admin_id):
    conn = sqlite3.connect('marketplace_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE listings 
        SET status = 'approved', approved_at = CURRENT_TIMESTAMP, approved_by = ?
        WHERE id = ?
    ''', (admin_id, listing_id))
    conn.commit()
    conn.close()

def reject_listing(listing_id):
    conn = sqlite3.connect('marketplace_bot.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE listings SET status = ? WHERE id = ?', ('rejected', listing_id))
    conn.commit()
    conn.close()

def get_listing_by_id(listing_id):
    conn = sqlite3.connect('marketplace_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT l.*, u.username, u.first_name
        FROM listings l
        JOIN users u ON l.user_id = u.user_id
        WHERE l.id = ?
    ''', (listing_id,))
    result = cursor.fetchone()
    conn.close()
    return result

def get_user_listings(user_id):
    conn = sqlite3.connect('marketplace_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT id, title, category, shop_price, my_price, quantity, status, created_at
        FROM listings
        WHERE user_id = ?
        ORDER BY created_at DESC
    ''', (user_id,))
    results = cursor.fetchall()
    conn.close()
    return results

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard(user_role):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    
    keyboard.add(KeyboardButton("üì± –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤"))
    keyboard.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"))
    keyboard.add(KeyboardButton("üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"))
    
    if user_role == 'admin':
        keyboard.add(KeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"))
    
    return keyboard

def get_categories_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    for category_key, category_name in CATEGORIES.items():
        keyboard.insert(InlineKeyboardButton(category_name, 
                                           callback_data=f"category_{category_key}"))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_catalog"))
    return keyboard

def get_category_selection_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    for category_name in CATEGORIES.values():
        keyboard.insert(KeyboardButton(category_name))
    return keyboard

def get_admin_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üìù –û–∂–∏–¥–∞—é—â–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"))
    keyboard.add(KeyboardButton("üë§ –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞"))
    keyboard.add(KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
    keyboard.add(KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    
    add_user(user_id, username, first_name)
    user_role = get_user_role(user_id)
    
    welcome_text = f"""
üõçÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–æ—Ä–≥–æ–≤—É—é –ø–ª–æ—â–∞–¥–∫—É!

–í—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏

–í–∞—à–∞ —Ä–æ–ª—å: {"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if user_role == 'admin' else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}
    """
    
    await message.answer(welcome_text, reply_markup=get_main_keyboard(user_role))

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message_handler(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu(message: types.Message):
    user_role = get_user_role(message.from_user.id)
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard(user_role))

# –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
@dp.message_handler(text="üì± –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤")
async def show_catalog_categories(message: types.Message):
    text = "üõçÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:"
    await message.answer(text, reply_markup=get_categories_keyboard())

@dp.callback_query_handler(lambda c: c.data.startswith('category_'))
async def show_category_listings(callback_query: types.CallbackQuery):
    category_key = callback_query.data.replace('category_', '')
    category_name = CATEGORIES.get(category_key, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è')
    
    listings = get_approved_listings(category_key)
    
    if not listings:
        await callback_query.message.edit_text(
            f"üì≠ –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.",
            reply_markup=get_categories_keyboard()
        )
        return
    
    await callback_query.message.delete()
    
    for listing in listings:
        listing_id, title, description, photo_id, category, shop_price, my_price, quantity, username = listing
        
        text = f"""
üõçÔ∏è <b>{title}</b>
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {CATEGORIES.get(category, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: @{username if username else '–ù–µ —É–∫–∞–∑–∞–Ω'}

üìù {description}

üí∞ <b>–¶–µ–Ω–∞ –º–∞–≥–∞–∑–∏–Ω–∞:</b> {shop_price} ‚ÇΩ
üíµ <b>–ú–æ—è —Ü–µ–Ω–∞:</b> {my_price} ‚ÇΩ
üì¶ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity} —à—Ç.

#—Ç–æ–≤–∞—Ä_{listing_id}
        """
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º", 
                                        callback_data=listing_cb.new(action='contact', listing_id=listing_id)))
        
        if photo_id:
            await callback_query.message.answer_photo(photo_id, caption=text, parse_mode='HTML', reply_markup=keyboard)
        else:
            await callback_query.message.answer(text, parse_mode='HTML', reply_markup=keyboard)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
    back_keyboard = InlineKeyboardMarkup()
    back_keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_catalog"))
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=back_keyboard)

@dp.callback_query_handler(lambda c: c.data == 'back_to_catalog')
async def back_to_catalog(callback_query: types.CallbackQuery):
    text = "üõçÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:"
    await callback_query.message.edit_text(text, reply_markup=get_categories_keyboard())

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@dp.message_handler(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def start_add_listing(message: types.Message):
    await ListingStates.waiting_for_title.set()
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

@dp.message_handler(state=ListingStates.waiting_for_title)
async def process_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await ListingStates.waiting_for_description.set()
    await message.answer("üìÑ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

@dp.message_handler(state=ListingStates.waiting_for_description)
async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await ListingStates.waiting_for_photo.set()
    
    skip_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    skip_keyboard.add(KeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ"))
    
    await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ':", 
                        reply_markup=skip_keyboard)

@dp.message_handler(content_types=['photo'], state=ListingStates.waiting_for_photo)
async def process_photo(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo_id=photo_id)
    await ListingStates.waiting_for_category.set()
    await message.answer("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", 
                        reply_markup=get_category_selection_keyboard())

@dp.message_handler(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ", state=ListingStates.waiting_for_photo)
async def skip_photo(message: types.Message, state: FSMContext):
    await state.update_data(photo_id=None)
    await ListingStates.waiting_for_category.set()
    await message.answer("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", 
                        reply_markup=get_category_selection_keyboard())

@dp.message_handler(lambda message: message.text in CATEGORIES.values(), state=ListingStates.waiting_for_category)
async def process_category(message: types.Message, state: FSMContext):
    # –ù–∞—Ö–æ–¥–∏–º –∫–ª—é—á –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    category_key = None
    for key, value in CATEGORIES.items():
        if value == message.text:
            category_key = key
            break
    
    if category_key:
        await state.update_data(category=category_key)
        await ListingStates.waiting_for_shop_price.set()
        await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –º–∞–≥–∞–∑–∏–Ω–∞ (–≤ —Ä—É–±–ª—è—Ö):", 
                            reply_markup=types.ReplyKeyboardRemove())
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")

@dp.message_handler(state=ListingStates.waiting_for_shop_price)
async def process_shop_price(message: types.Message, state: FSMContext):
    try:
        shop_price = float(message.text.replace(',', '.'))
        if shop_price <= 0:
            raise ValueError
        await state.update_data(shop_price=shop_price)
        await ListingStates.waiting_for_my_price.set()
        await message.answer("üíµ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ü–µ–Ω—É (–≤ —Ä—É–±–ª—è—Ö):")
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0):")

@dp.message_handler(state=ListingStates.waiting_for_my_price)
async def process_my_price(message: types.Message, state: FSMContext):
    try:
        my_price = float(message.text.replace(',', '.'))
        if my_price <= 0:
            raise ValueError
        await state.update_data(my_price=my_price)
        await ListingStates.waiting_for_quantity.set()
        await message.answer("üì¶ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:")
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0):")

@dp.message_handler(state=ListingStates.waiting_for_quantity)
async def process_quantity(message: types.Message, state: FSMContext):
    try:
        quantity = int(message.text)
        if quantity <= 0:
            raise ValueError
        
        data = await state.get_data()
        listing_id = add_listing(
            message.from_user.id,
            data['title'],
            data['description'],
            data.get('photo_id'),
            data['category'],
            data['shop_price'],
            my_price,
            quantity
        )
        
        await state.finish()
        
        user_role = get_user_role(message.from_user.id)
        category_name = CATEGORIES.get(data['category'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        await message.answer(
            f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! ID: {listing_id}\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
            "–û–∂–∏–¥–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=get_main_keyboard(user_role)
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ –Ω–æ–≤–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏
        await notify_admins_new_listing(listing_id)
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0):")

# –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@dp.message_handler(text="üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
async def show_my_listings(message: types.Message):
    user_listings = get_user_listings(message.from_user.id)
    
    if not user_listings:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
        return
    
    text = "üìã <b>–í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b>\n\n"
    
    for listing in user_listings:
        listing_id, title, category, shop_price, my_price, quantity, status, created_at = listing
        status_emoji = {
            'pending': '‚è≥',
            'approved': '‚úÖ',
            'rejected': '‚ùå'
        }
        status_text = {
            'pending': '–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏',
            'approved': '–û–¥–æ–±—Ä–µ–Ω–æ',
            'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'
        }
        
        category_name = CATEGORIES.get(category, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        text += f"{status_emoji.get(status, '‚ùì')} <b>{title}</b>\n"
        text += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
        text += f"üí∞ –¶–µ–Ω–∞ –º–∞–≥–∞–∑–∏–Ω–∞: {shop_price} ‚ÇΩ | –ú–æ—è —Ü–µ–Ω–∞: {my_price} ‚ÇΩ\n"
        text += f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.\n"
        text += f"üìä –°—Ç–∞—Ç—É—Å: {status_text.get(status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        text += f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {created_at[:16]}\n\n"
    
    await message.answer(text, parse_mode='HTML')

# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
@dp.message_handler(text="‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message):
    user_role = get_user_role(message.from_user.id)
    if user_role != 'admin':
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await message.answer("‚öôÔ∏è <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>", 
                        parse_mode='HTML', 
                        reply_markup=get_admin_keyboard())

# –û–∂–∏–¥–∞—é—â–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
@dp.message_handler(text="üìù –û–∂–∏–¥–∞—é—â–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
async def show_pending_listings(message: types.Message):
    user_role = get_user_role(message.from_user.id)
    if user_role != 'admin':
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    pending_listings = get_pending_listings()
    
    if not pending_listings:
        await message.answer("üì≠ –ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")
        return
    
    for listing in pending_listings:
        listing_id, title, description, category, shop_price, my_price, quantity, username = listing
        
        category_name = CATEGORIES.get(category, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        text = f"""
üìù <b>–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{listing_id}</b>
üë§ –ê–≤—Ç–æ—Ä: @{username if username else '–ù–µ —É–∫–∞–∑–∞–Ω'}

üõçÔ∏è <b>{title}</b>
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}
üìÑ {description}

üí∞ <b>–¶–µ–Ω–∞ –º–∞–≥–∞–∑–∏–Ω–∞:</b> {shop_price} ‚ÇΩ
üíµ <b>–ú–æ—è —Ü–µ–Ω–∞:</b> {my_price} ‚ÇΩ
üì¶ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity} —à—Ç.
        """
        
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", 
                               callback_data=admin_cb.new(action='approve', listing_id=listing_id)),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", 
                               callback_data=admin_cb.new(action='reject', listing_id=listing_id))
        )
        keyboard.add(
            InlineKeyboardButton("üëÅÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ", 
                               callback_data=admin_cb.new(action='details', listing_id=listing_id))
        )
        
        await message.answer(text, parse_mode='HTML', reply_markup=keyboard)

# –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞
@dp.message_handler(text="üë§ –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞")
async def add_admin_start(message: types.Message):
    user_role = get_user_role(message.from_user.id)
    if user_role != 'admin':
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await AdminStates.waiting_for_admin_id.set()
    await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:")

@dp.message_handler(state=AdminStates.waiting_for_admin_id)
async def process_admin_id(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
        make_admin(user_id)
        await state.finish()
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ):")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@dp.message_handler(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: types.Message):
    user_role = get_user_role(message.from_user.id)
    if user_role != 'admin':
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    conn = sqlite3.connect('marketplace_bot.db')
    cursor = conn.cursor()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('SELECT COUNT(*) FROM users')
    total_users = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM users WHERE role = "admin"')
    total_admins = cursor.fetchone()[0]
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    cursor.execute('SELECT COUNT(*) FROM listings')
    total_listings = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM listings WHERE status = "pending"')
    pending_listings = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM listings WHERE status = "approved"')
    approved_listings = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM listings WHERE status = "rejected"')
    rejected_listings = cursor.fetchone()[0]
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    cursor.execute('''
        SELECT category, COUNT(*) 
        FROM listings 
        WHERE status = "approved" 
        GROUP BY category
    ''')
    category_stats = cursor.fetchall()
    
    conn.close()
    
    text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: {total_users}
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {total_admins}

üìù <b>–û–±—ä—è–≤–ª–µ–Ω–∏—è:</b>
‚Ä¢ –í—Å–µ–≥–æ: {total_listings}
‚Ä¢ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {pending_listings}
‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ: {approved_listings}
‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {rejected_listings}

üìÇ <b>–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ):</b>
"""
    
    for category_key, count in category_stats:
        category_name = CATEGORIES.get(category_key, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        text += f"‚Ä¢ {category_name}: {count}\n"
    
    await message.answer(text, parse_mode='HTML')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
@dp.callback_query_handler(admin_cb.filter())
async def process_admin_callback(callback_query: types.CallbackQuery, callback_data: dict):
    action = callback_data['action']
    listing_id = int(callback_data['listing_id'])
    
    user_role = get_user_role(callback_query.from_user.id)
    if user_role != 'admin':
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    if action == 'approve':
        approve_listing(listing_id, callback_query.from_user.id)
        await callback_query.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ!", show_alert=True)
        
        # –£–≤–µ–¥–æ–º–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        listing = get_listing_by_id(listing_id)
        if listing:
            try:
                await bot.send_message(
                    listing[1],  # user_id
                    f"‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ '{listing[2]}' –±—ã–ª–æ –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!"
                )
            except:
                pass
        
        await callback_query.message.edit_reply_markup()
    
    elif action == 'reject':
        reject_listing(listing_id)
        await callback_query.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!", show_alert=True)
        
        # –£–≤–µ–¥–æ–º–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        listing = get_listing_by_id(listing_id)
        if listing:
            try:
                await bot.send_message(
                    listing[1],  # user_id
                    f"‚ùå –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ '{listing[2]}' –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )
            except:
                pass
        
        await callback_query.message.edit_reply_markup()
    
    elif action == 'details':
        listing = get_listing_by_id(listing_id)
        if listing:
            text = f"""
üìã <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ #{listing_id}</b>

üë§ <b>–ê–≤—Ç–æ—Ä:</b> {listing[12]} {listing[13]} (@{listing[11] if listing[11] else '–ù–µ —É–∫–∞–∑–∞–Ω'})
üÜî <b>ID –∞–≤—Ç–æ—Ä–∞:</b> {listing[1]}

üõçÔ∏è <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {listing[2]}
üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {CATEGORIES.get(listing[5], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {listing[3]}

üí∞ <b>–¶–µ–Ω–∞ –º–∞–≥–∞–∑–∏–Ω–∞:</b> {listing[6]} ‚ÇΩ
üíµ <b>–ú–æ—è —Ü–µ–Ω–∞:</b> {listing[7]} ‚ÇΩ
üì¶ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {listing[8]} —à—Ç.

üìä <b>–°—Ç–∞—Ç—É—Å:</b> {listing[9]}
üìÖ <b>–°–æ–∑–¥–∞–Ω–æ:</b> {listing[10][:16] if listing[10] else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
            """
            
            if listing[4]:  # photo_id
                await callback_query.message.answer_photo(listing[4], caption=text, parse_mode='HTML')
            else:
                await callback_query.message.answer(text, parse_mode='HTML')
        
        await callback_query.answer()

@dp.callback_query_handler(listing_cb.filter())
async def process_listing_callback(callback_query: types.CallbackQuery, callback_data: dict):
    action = callback_data['action']
    listing_id = int(callback_data['listing_id'])
    
    if action == 'contact':
        listing = get_listing_by_id(listing_id)
        if listing:
            seller_username = listing[11]  # –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å
            if seller_username:
                await callback_query.answer(
                    f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º: @{seller_username}",
                    show_alert=True
                )
            else:
                await callback_query.answer(
                    "–£ –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–µ —É–∫–∞–∑–∞–Ω username –≤ –ø—Ä–æ—Ñ–∏–ª–µ",
                    show_alert=True
                )
        else:
            await callback_query.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏
async def notify_admins_new_listing(listing_id):
    conn = sqlite3.connect('marketplace_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM users WHERE role = "admin"')
    admin_ids = [row[0] for row in cursor.fetchall()]
    conn.close()
    
    listing = get_listing_by_id(listing_id)
    if listing:
        text = f"""
üîî <b>–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏!</b>

üìù ID: {listing_id}
üõçÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {listing[2]}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {CATEGORIES.get(listing[5], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
üë§ –ê–≤—Ç–æ—Ä: @{listing[11] if listing[11] else '–ù–µ —É–∫–∞–∑–∞–Ω'}

–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.
        """
        
        for admin_id in admin_ids:
            try:
                await bot.send_message(admin_id, text, parse_mode='HTML')
            except:
                pass

if __name__ == '__main__':
    init_db()
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    executor.start_polling(dp, skip_updates=True)